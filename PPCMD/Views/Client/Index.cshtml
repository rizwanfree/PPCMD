@model IEnumerable<PPCMD.Models.Client>

@{
    ViewData["Title"] = "Clients";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="h4 fw-bold text-success">📋 Clients</h1>
    <a asp-action="Create" class="btn btn-success">➕ Add Client</a>
</div>

<!-- Search Bar -->
<div class="mb-3">
    <input type="text" id="searchInput" class="form-control" placeholder="🔍 Search clients...">
</div>

<!-- Card Grid -->
<div id="clientsGrid" class="row g-3">
    @foreach (var client in Model)
    {
        <div class="col-12 col-sm-6 col-md-4 col-lg-3 client-card"
             data-name="@client.ClientName @client.ContactPerson @client.Mobile">
            <div class="card h-100 shadow-sm border-0">
                <div class="card-body d-flex flex-column justify-content-between">
                    <div>
                        <h5 class="card-title text-truncate mb-2">@client.ClientName</h5>
                        <p class="card-text mb-1 text-muted">📌 @client.ContactPerson</p>
                        <p class="card-text mb-1 text-muted">📱 @client.Mobile</p>
                        <p class="card-text text-muted">
                            ✉️ @(client.Emails.FirstOrDefault()?.Email ?? "No Email")
                        </p>
                    </div>
                    <div class="mt-2 text-end">
                        <a asp-action="Details" asp-route-id="@client.Id" class="btn btn-sm btn-outline-primary">
                            🔍 Details
                        </a>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Pagination -->
<div class="d-flex justify-content-center align-items-center gap-2 mt-4">
    <button onclick="changePage(-1)" class="btn btn-sm btn-outline-secondary">⬅ Prev</button>
    <span id="pageIndicator" class="text-muted small">Page 1</span>
    <button onclick="changePage(1)" class="btn btn-sm btn-outline-secondary">Next ➡</button>
</div>

@section Scripts {
    <script>
        const cardsPerPage = 12;
        let currentPage = 1;

        function getVisibleCards() {
            return Array.from(document.querySelectorAll(".client-card"))
                .filter(card => card.dataset.visible === "true");
        }

        function filterCards() {
            const searchTerm = document.getElementById("searchInput").value.toLowerCase();
            const cards = document.querySelectorAll(".client-card");

            cards.forEach(card => {
                const name = card.dataset.name.toLowerCase();
                card.dataset.visible = name.includes(searchTerm) ? "true" : "false";
            });

            currentPage = 1;
            paginateCards();
        }

        function paginateCards() {
            const cards = document.querySelectorAll(".client-card");
            const visibleCards = getVisibleCards();

            const totalPages = Math.ceil(visibleCards.length / cardsPerPage) || 1;
            document.getElementById("pageIndicator").innerText = `Page ${currentPage} of ${totalPages}`;

            visibleCards.forEach((card, index) => {
                const start = (currentPage - 1) * cardsPerPage;
                const end = start + cardsPerPage;
                card.style.display = (index >= start && index < end) ? "" : "none";
            });

            cards.forEach(card => {
                if (card.dataset.visible === "false") card.style.display = "none";
            });
        }

        function changePage(step) {
            const visibleCards = getVisibleCards();
            const totalPages = Math.ceil(visibleCards.length / cardsPerPage) || 1;
            currentPage = Math.max(1, Math.min(currentPage + step, totalPages));
            paginateCards();
        }

        document.getElementById("searchInput").addEventListener("input", filterCards);

        document.addEventListener("DOMContentLoaded", () => {
            document.querySelectorAll(".client-card").forEach(card => card.dataset.visible = "true");
            paginateCards();
        });
    </script>
}
